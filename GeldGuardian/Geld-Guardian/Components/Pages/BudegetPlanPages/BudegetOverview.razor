@page "/budgetplan"
@attribute [Authorize]
@inject Geld_Guardian.Data.ApplicationDbContext DB
@inject AuthenticationStateProvider auth
@using Geld_Guardian.Components.Data.Models
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using System.Globalization


<div class="row">
    <div class="col-md-11">
        <h1>Budget Used</h1>
        <p>
            <a href="budgetplan/manage">Change Limits</a>
        </p>
    </div>
    <div class="column">
        <img src="pics/gg.png" alt="Geld-Guardian Logo" height="120">
    </div>
</div>

<hr />

<div class="row">
    <div class="col-md-4 col-xs-6" style="text-align:right;">
        <p>Choose a date:</p>
    </div>
    <div class="col-md-4 col-xs-6 form-inline">
        <InputSelect @bind-Value="Month" class="form-control mx-2">
            @for (int i = 1; i <= 12; i++)
            {
                <option value="@i">@DateTimeFormatInfo.CurrentInfo.GetMonthName(i)</option>
            }
        </InputSelect>
        <InputSelect @bind-Value="year" class="form-control">
            @for (int i = 1990; i <= DateTime.Now.Year; i++)
            {
                <option value="@i">@i</option>
            }
        </InputSelect>
    </div>
</div>

<div class="table-responsive">
        <QuickGrid id="planner-table" Class="table" Items="@BudgetPlans">
            <TemplateColumn>
                <nobr><strong>@context.Category.Name</strong> @context.Category.Description </nobr>
            </TemplateColumn>
            <TemplateColumn>
                    @{var percentage = getPercentage(context);}
                    <div class="progress" style="height: 20px; min-width: 50vw">
                <div class="progress-bar progress-bar-striped progress-bar-animated @(percentage > 100 ? "bg-danger" : percentage == 100 ? "bg-success" : "bg-pink")"
                     role="progressbar" style="width: @percentage%">
                            @getUsedBudget(context.CategoryId) / @context.Amount (@percentage%)
                        </div>
                    </div>
            </TemplateColumn>
        </QuickGrid>
</div>


@code {
    #nullable enable
    private IQueryable<BudgetPlan>? BudgetPlans;
    private string? _UserId;
    private int Month = DateTime.Now.Month;
    private int year = DateTime.Now.Year;

    protected override void OnInitialized()
    {
        _UserId = getUser();
        // only show the expenses of the current user
        BudgetPlans = DB.BudgetPlans
                            .Where(bp => bp.UserId == _UserId)
                            .Include( bp => bp.User )
                            .Include( bp => bp.Category )
                            .Where( bp => bp.Category.EarningsInsteadOfExpenses == false)
                            .OrderBy( bp => bp.Category.Name)
                            .AsQueryable();

        if(BudgetPlans == null || BudgetPlans.Count() <= 0)
        {
            InitBudgetPlan();
        }
    }


    private void InitBudgetPlan()
    {

        foreach (var category in DB.Categorie)
        {
            BudgetPlan budgetPlan = new BudgetPlan();
            budgetPlan.UserId = _UserId;
            budgetPlan.CategoryId = category.CategorieId;
            budgetPlan.Amount = 0;
            DB.BudgetPlans.Add(budgetPlan);
        }
        DB.SaveChanges();
    }

    private int getPercentage(BudgetPlan plan)
    {
        var used = getUsedBudget(plan.CategoryId);
        var total = plan.Amount;

        if(total == 0)
        {
            return 100;
        }
        else
        {
            return (int)(used / total * 100);
        }
    }

    private decimal getUsedBudget(int categoryId)
    {
        var bills = DB.Bills
                    .Where(b => b.UserId == _UserId)
                    .Where(b => b.CategoryId == categoryId)
                    .Where(b => b.BillDate.Month == Month)
                    .Where(b => b.BillDate.Year == year)
                    .Include(b => b.BillItems);

        decimal sum = 0;

        foreach (var bill in bills)
        {
            sum += bill.TotalAmount;
        }

        return sum;
    }


    private string getUser()
    {
        var userPrincipal = auth.GetAuthenticationStateAsync().Result.User;
        var userid = userPrincipal.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (!string.IsNullOrEmpty(userid))
            return userid;//await UserDbContext.Users.FirstOrDefaultAsync(u => u.Id == userid);
        return null;
    }

}
