@page "/BillItems/edit"
@attribute [Authorize]
@inject Geld_Guardian.Data.ApplicationDbContext DB
@using Geld_Guardian.Components.Data.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>BillItem</h4>
<hr />
@if (BillItem is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="BillItem" OnValidSubmit="UpdateBillItem" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="BillItem.BillItemId" value="@BillItem.BillItemId" />
                <div class="mb-3">
                    <p>Billing Number: @BillItem.Bill.BillingNumber</p>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="BillItem.Description" class="form-control" />
                    <ValidationMessage For="() => BillItem.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputSelect id="category" @bind-Value="BillItem.CategoryId" class="form-control" >
                        @foreach (var category in DB.Categorie)
                        {
                            <option value="@category.CategorieId">@category.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => BillItem.Category" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="quantity" class="form-label">Quantity:</label>
                    <InputNumber id="quantity" @bind-Value="BillItem.Quantity" class="form-control" />
                    <ValidationMessage For="() => BillItem.Quantity" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="unitprice" class="form-label">UnitPrice:</label>
                    <InputNumber id="unitprice" @bind-Value="BillItem.UnitPrice" class="form-control" />
                    <ValidationMessage For="() => BillItem.UnitPrice" class="text-danger" />
                </div>
                <button type="submit" id="main-btn" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="@($"/bills/details?billid={BillItem.BillId}")">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int BillItemId { get; set; }

    #nullable enable
    [SupplyParameterFromForm]
    public BillItem? BillItem { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BillItem ??= await DB.BillItems.Include(x => x.Bill).FirstOrDefaultAsync(m => m.BillItemId == BillItemId);

        if (BillItem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateBillItem()
    {
        DB.Attach(BillItem!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BillItemExists(BillItem!.BillItemId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo($"/bills/details?billid={BillItem!.BillId}");
    }

    bool BillItemExists(int billitemid)
    {
        return DB.BillItems.Any(e => e.BillItemId == billitemid);
    }
}
