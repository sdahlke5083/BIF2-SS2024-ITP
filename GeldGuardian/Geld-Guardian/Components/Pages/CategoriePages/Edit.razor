@page "/Categories/edit"
@attribute [Authorize(Roles = "Admin")]
@inject Geld_Guardian.Data.ApplicationDbContext DB
@using Geld_Guardian.Pages.Data.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Categories</h4>
<hr />
@if (Categories is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Categories" OnValidSubmit="UpdateCategories" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Categories.Id" value="@Categories.CategorieId" />
                <div class="mb-3">
                    <label for="name" id="input-label" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Categories.Name" class="form-control" />
                    <ValidationMessage For="() => Categories.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" id="input-label" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Categories.Description" class="form-control" />
                    <ValidationMessage For="() => Categories.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="useage" id="input-label" class="form-label">Useage: </label>
                    <InputRadioGroup id="useage" @bind-Value="Categories.EarningsInsteadOfExpenses" class="form-control">
                        <label for="use1" class="form-label">Earnings</label>
                        <InputRadio id="use1" Value="true" />
                        <label for="use2" class="form-label">Expenses</label>
                        <InputRadio id="use2" Value="false" />
                    </InputRadioGroup>
                    <ValidationMessage For="() => Categories.EarningsInsteadOfExpenses" class="text-danger" />
                </div>
                <button type="submit" id="main-btn" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/categories">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Categorie? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Categories ??= await DB.Categorie.FirstOrDefaultAsync(m => m.CategorieId == Id);

        if (Categories is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateCategories()
    {
        DB.Attach(Categories!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CategoriesExists(Categories!.CategorieId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/categories");
    }

    bool CategoriesExists(int id)
    {
        return DB.Categorie.Any(e => e.CategorieId == id);
    }
}
