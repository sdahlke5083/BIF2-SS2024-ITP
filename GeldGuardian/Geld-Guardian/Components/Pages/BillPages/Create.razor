@page "/bills/create"
@attribute [Authorize]
@inject Geld_Guardian.Data.ApplicationDbContext DB
@inject AuthenticationStateProvider auth
@inject NavigationManager NavigationManager
@using Geld_Guardian.Pages.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>Create</PageTitle>

<h1 @onclick="ShowEarningsForm" style="cursor: pointer;">Earnings/</h1> 
<h1 @onclick="ShowExpensesForm" style="cursor: pointer;">Expenses</h1>
<p>Click to switch Forms</p>



<hr />
<div class="row">
    @if(isEarningsFormVisible){
        <div class="col-md-8">
            <EditForm method="post" Model="Bills" OnValidSubmit="AddBill" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <div class="form-floating mb-3">
                    <label for="storename" class="form-label" id="input-label">StoreName:</label>
                    <InputText id="storename" @bind-Value="Bills.StoreName" class="form-control" />
                    <ValidationMessage For="() => Bills.StoreName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="billingnumber" class="form-label" id="input-label">BillingNumber:</label>
                    <InputText id="billingnumber" @bind-Value="Bills.BillingNumber" class="form-control" />
                    <ValidationMessage For="() => Bills.BillingNumber" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="billdate" class="form-label" id="input-label">BillDate:</label>
                    <InputDate id="billdate" @bind-Value="Bills.BillDate" class="form-control" />
                    <ValidationMessage For="() => Bills.BillDate" class="text-danger" />
                </div>
                <!--
                <div class="form-floating mb-3">
                    <label for="netto" class="form-label" id="input-label">Netto/Income:</label>
                                    <InputNumber id="netto" @bind-Value="Bills.Netto" class="form-control" />
                                    <ValidationMessage For="() => Bills.Netto" class="text-danger" />
                                </div>
                -->
                
                <div class="form-floating mb-3">
                    <label for="status" class="form-label" id="input-label">Status:</label>
                    <InputSelect id="status" @bind-Value="Bills.StatusId" class="form-control" disabled>
                        @foreach (var stat in Statuses)
                        {
                            <option value="@stat.StatusId">@stat.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Bills.Status" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="category" class="form-label" id="input-label">Category:</label>
                    <InputSelect id="category" @bind-Value="Bills.CategoryId" class="form-control">
                        @foreach (var cat in Categories)
                        {
                            <option value="@cat.CategorieId">@cat.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Bills.Category" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="paymentmethod" class="form-label" id="input-label">PaymentMethod:</label>
                    <InputSelect id="paymentmethod" @bind-Value="Bills.PaymentMethodId" class="form-control">
                        @foreach (var meth in PaymentMethods)
                        {
                            <option value="@meth.PaymentId">@meth.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Bills.PaymentMethod" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary" id="main-btn">Create</button>
            </EditForm>
        </div>
    }
    else
    {
        <div class="col-md-6">
            <EditForm method="post" Model="Bills" OnValidSubmit="AddBill" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <div class="form-floating mb-3">
                    <label for="storename" class="form-label" id="input-label">StoreName:</label>
                    <InputText id="storename" @bind-Value="Bills.StoreName" class="form-control" />
                    <ValidationMessage For="() => Bills.StoreName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="billingnumber" class="form-label" id="input-label">BillingNumber:</label>
                    <InputText id="billingnumber" @bind-Value="Bills.BillingNumber" class="form-control" />
                    <ValidationMessage For="() => Bills.BillingNumber" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="billdate" class="form-label" id="input-label">BillDate:</label>
                    <InputDate id="billdate" @bind-Value="Bills.BillDate" class="form-control" />
                    <ValidationMessage For="() => Bills.BillDate" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="duedate" class="form-label" id="input-label">DueDate:</label>
                    <InputDate id="duedate" @bind-Value="Bills.DueDate" class="form-control" />
                    <ValidationMessage For="() => Bills.DueDate" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="status" class="form-label" id="input-label">Status:</label>
                    <InputSelect id="status" @bind-Value="Bills.StatusId" class="form-control">
                        @foreach (var stat in Statuses)
                        {
                            <option value="@stat.StatusId">@stat.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Bills.Status" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="category" class="form-label" id="input-label">Category:</label>
                    <InputSelect id="category" @bind-Value="Bills.CategoryId" class="form-control">
                        @foreach (var cat in Categories)
                        {
                            <option value="@cat.CategorieId">@cat.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Bills.Category" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <label for="paymentmethod" class="form-label" id="input-label">PaymentMethod:</label>
                    <InputSelect id="paymentmethod" @bind-Value="Bills.PaymentMethodId" class="form-control">
                        @foreach (var meth in PaymentMethods)
                        {
                            <option value="@meth.PaymentId">@meth.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Bills.PaymentMethod" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary" id="main-btn">Create</button>
            </EditForm>
        </div>



        <div class="col-md-5" id="addItemCon">
             <EditForm method="post" Model="Item" OnValidSubmit="AddItem" FormName="ItemCreate" Enhance>
            <h4 id="itemH">Items</h4>
            <div class="form-floating mb-3">
                <label for="storename" class="form-label" id="input-label">ItemName:</label>
                <InputText id="itemname" @bind-Value="Item.Description" class="form-control" />
            </div>
                <div class="mb-3">
                    <label for="quantity" class="form-label" id="input-label">Quantity:</label>
                    <InputNumber id="quantity" @bind-Value="Item.Quantity" class="form-control" min="1"/>
                </div>
                <div class="mb-3">
                    <label for="unitprice" class="form-label" id="input-label">UnitPrice:</label>
                    <InputNumber id="unitprice" @bind-Value="Item.UnitPrice" class="form-control"/>
                </div>
                <button type="submit" class="btn btn-primary" id="item-btn">AddItem</button>
            </EditForm>
 
            <div class="table-responsive">
                <QuickGrid id="infos-table" Class="table" Items="ThisBillItems.AsQueryable()" >
                    <PropertyColumn Property="billitem => billitem.Description" />
                    <PropertyColumn Property="billitem => billitem.Quantity" />
                    <PropertyColumn Property="billitem => billitem.UnitPrice" />


                    <TemplateColumn Context="bill">
                        <a href="">Delete</a>
                    </TemplateColumn>
                </QuickGrid>
        
            </div>
        </div>
    }

</div>


<div>
    <a href="/bills">Back to List</a>
</div>


@if (showErrors)
{
<div class="position-fixed bottom-0 right-0 p-3" style="z-index: 5; right: 0; bottom: 0;">
  <div id="liveToast" class="toast hide" role="alert" aria-live="assertive" aria-atomic="true" data-delay="2000">
    <div class="toast-header">
      <img src="..." class="rounded mr-2" alt="...">
      <strong class="mr-auto">Bootstrap</strong>
      <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="toast-body">
      Hello, world! This is a toast message.
    </div>
  </div>
</div>
}



@code {
    private bool isEarningsFormVisible = true;

    private void ShowEarningsForm()
    {
        isEarningsFormVisible = true;
    }

    private void ShowExpensesForm()
    {
        isEarningsFormVisible = false;
    }

    [SupplyParameterFromForm]
    public Bill Bills { get; set; } = new();

    [SupplyParameterFromForm]
    public BillItem Item { get; set; } = new();

    public List<Categorie> Categories { get; set; } = [];
    public List<PaymentStatus> Statuses { get; set; } = [];
    public List<PaymentMethod> PaymentMethods { get; set; } = [];
    public List<BillItem> ThisBillItems = new List<BillItem>();
    public bool showErrors = false;

    protected override void OnInitialized()
    {
        Statuses = DB.PaymentStatus.ToList();
        PaymentMethods = DB.PaymentMethod.ToList();
        Categories = DB.Categorie.ToList();
        Bills.BillDate = DateTime.Today;
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddBill()
    {
        Bills.UserId = getUser();
        DB.Bills.Add(Bills);
        await DB.SaveChangesAsync();
        int BillId = Bills.BillId;
        foreach (var item in ThisBillItems)
        {
            item.BillId = BillId;
            item.CategoryId = Bills.CategoryId;
            DB.BillItems.Add(item);
        }
        NavigationManager.NavigateTo("/bills");
    }

    public void AddItem()
    {
        if (Item.Quantity <= 0 || Item.UnitPrice < 0)
        {
            showErrors = true;
            return;
        }
        ThisBillItems.Add(Item);
        Item = new();

    }

    private string getUser()
    {
        var userPrincipal = auth.GetAuthenticationStateAsync().Result.User;
        var userid = userPrincipal.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (!string.IsNullOrEmpty(userid))
            return userid;//await UserDbContext.Users.FirstOrDefaultAsync(u => u.Id == userid);
        return null;
    }
}
