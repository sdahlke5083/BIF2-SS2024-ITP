@page "/bills"
@attribute [Authorize]
@inject Geld_Guardian.Data.ApplicationDbContext DB
@inject AuthenticationStateProvider auth
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.QuickGrid
@using Geld_Guardian.Pages.Data.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>BudgetOverview</h1>
<hr />
<p>
    <a href="bills/create">Create New</a>
</p>
<div class="row">
    <div class="col-lg-12 col-md-8 col-sm-12">
        <div class="table-responsive">
            <QuickGrid id="infos-table" Class="table" Items="@Bills" Pagination="@pagination">
                <PropertyColumn Property="bill => bill.StoreName" />
                <PropertyColumn Property="bill => bill.BillingNumber" />
                <PropertyColumn Property="bill => bill.BillDate" />
                <PropertyColumn Property="bill => bill.DueDate" />
                <PropertyColumn Property="bill => bill.Status" />
                <PropertyColumn Property="bill => bill.Category" />
                <PropertyColumn Property="bill => bill.PaymentMethod" />

                <TemplateColumn Context="bill">
                    <a href="@($"bills/edit?billid={bill.BillId}")">Edit</a> |
                    <a href="@($"bills/details?billid={bill.BillId}")">Details</a> |
                    <a href="@($"bills/delete?billid={bill.BillId}")">Delete</a>
                </TemplateColumn>
            </QuickGrid>
        <Paginator State="@pagination" />
    
        </div>
    </div>
</div>

<div class="row">
    @if(ChartList.Count > 0 || IncomeList.Count > 0)
    {
        @if(ChartList.Count > 0){
            <div class="col-lg-4 col-md-8 col-sm-12" >
                <PieChart Slices="@ChartList" />
            </div>
        }
        @if(ChartList.Count > 0){
            <div class="col-lg-4 col-md-8 col-sm-12" >
                <PieChart Slices="@IncomeList" />
            </div>
        }
    } else
    {
        <div class="col-lg-6 col-md-8 col-sm-12">
            <p>No data available</p>
        </div>
    
    }
</div>

@code {

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Bill>? Bills;
    List<PieChart.PieChartSlice> ChartList = new List<PieChart.PieChartSlice>();
    List<PieChart.PieChartSlice> IncomeList = new List<PieChart.PieChartSlice>();


    protected override void OnInitialized()
    {
        Bills = (DB.Bills
                    .Where(m => m.UserId == this.getUser())
                    .Include(b => b.Category)
                    .Include(b => b.Status)
                    .Include(b => b.PaymentMethod)
                    .Include(b => b.BillItems)
        ).AsQueryable();

        var categories = DB.Categorie.Where(c => c.IsForExpenses == true).ToList();
        decimal sum = 0;
        foreach (var bill in Bills) // foreach because LINQ doesn't support Sum() on decimal on SQLite
        {
            sum += bill.TotalAmount;
        }
        if(sum != 0)
        {
            foreach (var category in categories)
            {
                decimal value = 0;
                var CategoryBills = Bills.Where(b => b.CategoryId == category.CategorieId);
                if(CategoryBills.Count() == 0 )
                    continue;
            
                foreach (var bill in Bills.Where(b => b.CategoryId == category.CategorieId)) {
                    value += bill.TotalAmount;
                }
                ChartList.Add(new PieChart.PieChartSlice(value, sum, category.Name));
            }
        }

        categories = DB.Categorie.Where(c => c.IsForEarnings == true).ToList();
        sum = 0;
        foreach (var bill in Bills) // foreach because LINQ doesn't support Sum() on decimal on SQLite
        {
            sum += bill.Netto ?? 0;
        }
        if (sum != 0)
        {
            foreach (var category in categories)
            {
                decimal value = 0;
                var CategoryBills = Bills.Where(b => b.CategoryId == category.CategorieId);
                if (CategoryBills.Count() == 0)
                    continue;

                foreach (var bill in Bills.Where(b => b.CategoryId == category.CategorieId))
                {
                    value += bill.Netto ?? 0;
                }
                if(sum > 0 && value > 0)
                    IncomeList.Add(new PieChart.PieChartSlice(value, sum, category.Name));
            }
        }
    }


    private string getUser()
    {
        var userPrincipal = auth.GetAuthenticationStateAsync().Result.User;
        var userid = userPrincipal.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (!string.IsNullOrEmpty(userid))
            return userid;//await UserDbContext.Users.FirstOrDefaultAsync(u => u.Id == userid);
        return null;
    }

}
