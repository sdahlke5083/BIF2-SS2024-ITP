@page "/bills"
@attribute [Authorize]
@inject Geld_Guardian.Data.ApplicationDbContext DB
@inject AuthenticationStateProvider auth
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.QuickGrid
@using Geld_Guardian.Pages.Data.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<h1>BudgetOverview</h1>
<hr />
<p>
    <a href="bills/create">Create New</a>
</p>
<div class="col-lg-12 col-md-8 col-sm-12">
    <div class="table-responsive">
        <QuickGrid id="infos-table" Class="table" Items="@Bills" Pagination="@pagination">
            <PropertyColumn Property="bill => bill.StoreName" />
            <PropertyColumn Property="bill => bill.BillingNumber" />
            <PropertyColumn Property="bill => bill.BillDate" />
            <PropertyColumn Property="bill => bill.DueDate" />
            <PropertyColumn Property="bill => bill.Status" />
            <PropertyColumn Property="bill => bill.Category" />
            <PropertyColumn Property="bill => bill.PaymentMethod" />

            <TemplateColumn Context="bill">
                <a href="@($"bills/edit?billid={bill.BillId}")">Edit</a> |
                <a href="@($"bills/details?billid={bill.BillId}")">Details</a> |
                <a href="@($"bills/delete?billid={bill.BillId}")">Delete</a>
            </TemplateColumn>
        </QuickGrid>
    <Paginator State="@pagination" />
    
    </div>
</div>
@code {

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Bill>? Bills;

    protected override void OnInitialized()
    {
        Bills = (DB.Bills
                    .Where(m => m.UserId == this.getUser())
                    .Include(b => b.Category)
                    .Include(b => b.Status)
                    .Include(b => b.PaymentMethod)
        ).AsQueryable();
    }


    private string getUser()
    {
        var userPrincipal = auth.GetAuthenticationStateAsync().Result.User;
        var userid = userPrincipal.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (!string.IsNullOrEmpty(userid))
            return userid;//await UserDbContext.Users.FirstOrDefaultAsync(u => u.Id == userid);
        return null;
    }

}
