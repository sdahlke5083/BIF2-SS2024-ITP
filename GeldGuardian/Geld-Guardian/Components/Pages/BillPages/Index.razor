@page "/bills"
@attribute [Authorize]
@inject Geld_Guardian.Data.ApplicationDbContext DB
@inject AuthenticationStateProvider auth
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.QuickGrid
@using Geld_Guardian.Components.Data.Models
@using Microsoft.EntityFrameworkCore
@using System.Globalization

<PageTitle>Index</PageTitle>

<div class="row">
    <div class="col-md-11">
        <h1>BudgetOverview</h1>
        <p>
            <a href="bills/create">Create New</a>
        </p>
    </div>
    <div class="column">
        <img src="pics/gg.png" alt="Geld-Guardian Logo" height="120">
    </div>
</div>
<hr />



<div class="row">
    <div class="col-md-4 col-xs-6" style="text-align:right;">
       <p>Choose a date:</p>
    </div>
    <div class="col-md-4 col-xs-6 form-inline">
        <InputSelect @bind-Value="Month" class="form-control mx-2">
            @for (int i = 1; i <= 12; i++)
            {
                <option value="@i">@DateTimeFormatInfo.CurrentInfo.GetMonthName(i)</option>
            }
        </InputSelect>
        <InputSelect @bind-Value="year" class="form-control">
            @for (int i = 1990; i <= DateTime.Now.Year; i++)
            {
                <option value="@i">@i</option>
            }
        </InputSelect>
    </div>

</div>


<div class="row">
    <div class="col-12">
        <div class="table-responsive">
            <QuickGrid id="infos-table" Class="table" Items="@FilteredBills" Pagination="@pagination">
                <PropertyColumn Property="bill => bill.StoreName" />
                <PropertyColumn Property="bill => bill.BillingNumber" />
                <PropertyColumn Property="bill => bill.BillDate.Date" />
                <PropertyColumn Property="bill => (bill.DueDate.HasValue ? bill.DueDate.Value.Date : bill.DueDate)" />
                <PropertyColumn Property="bill => bill.Status" />
                <PropertyColumn Property="bill => bill.Category" />
                <PropertyColumn Property="bill => bill.PaymentMethod" />

                <TemplateColumn Context="bill">
                    <a href="@($"bills/edit?billid={bill.BillId}")">Edit</a> |
                    <a href="@($"bills/details?billid={bill.BillId}")">Details</a> |
                    <a href="@($"bills/delete?billid={bill.BillId}")">Delete</a>
                </TemplateColumn>
            </QuickGrid>
        </div>
        <Paginator State="@pagination" />
    </div>
</div>

<div class="row">
    @if(ChartList.Count > 0 || IncomeList.Count > 0)
    {
        <div class="col-lg-4 col-md-6 col-sm-12" >
            <PieChart Slices="@ChartList" Title="Expenses" />
        </div>
        <div class="col-lg-4 col-md-6 col-sm-12">
            <PieChart Slices="@IncomeList" Title="Earnings" />
        </div>
    } else
    {
        <div class="col-lg-6 col-md-8 col-sm-12">
            <p>No data available</p>
        </div>
    
    }
</div>

@code {
#nullable enable

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<Bill>? Bills;
    int Month = 1;
    int year = 1990;


    List<PieChart.PieChartSlice> ChartList
    {
        get
        {
            List<PieChart.PieChartSlice> _ChartList = new List<PieChart.PieChartSlice>();
            var categories = DB.Categorie.Where(c => c.IsForExpenses == true).ToList();
            decimal sum = 0;
            foreach (var bill in FilteredBills!.Where(fb => fb.Category.IsForExpenses == true)) // foreach because LINQ doesn't support Sum() on decimal on SQLite
            {
                sum += bill.TotalAmount;
            }
            if (sum > 0 && FilteredBills is not null)
            {
                foreach (var category in categories)
                {
                    decimal value = 0;
                    var CategoryBills = FilteredBills.Where(b => b.CategoryId == category.CategorieId);
                    if (CategoryBills.Count() == 0)
                        continue;

                    foreach (var bill in FilteredBills.Where(b => b.CategoryId == category.CategorieId))
                    {
                        value += bill.TotalAmount;
                    }
                    _ChartList.Add(new PieChart.PieChartSlice(value, sum, category.Name));
                }
            }
            return _ChartList;
        }    
    }

    List<PieChart.PieChartSlice> IncomeList {
        get
        {
            List<PieChart.PieChartSlice> _IncomeList = new List<PieChart.PieChartSlice>();
            var cats = DB.Categorie.Where(c => c.IsForEarnings == true).ToList();
            decimal sumI = 0;
            foreach (var bill in FilteredBills!.Where(fb => fb.Category.IsForEarnings == true )) // foreach because LINQ doesn't support Sum() on decimal on SQLite
            {
                sumI += bill.Netto ?? 0;
            }
            if (sumI > 0 && FilteredBills is not null)
            {
                foreach (var category in cats)
                {
                    decimal value = 0;
                    var CategoryBills = FilteredBills.Where(b => b.CategoryId == category.CategorieId);
                    if (CategoryBills.Count() == 0)
                        continue;

                    foreach (var bill in FilteredBills.Where(b => b.CategoryId == category.CategorieId))
                    {
                        value += bill.Netto ?? 0;
                    }
                    _IncomeList.Add(new PieChart.PieChartSlice(value, sumI, category.Name));
                }
            }
            return _IncomeList;
        }    
    }

    IQueryable<Bill>? FilteredBills
    {
        get { 
            if(Month != 1 && year != 1990 && Bills is not null)
                return Bills.Where(b => b.BillDate.Month == Month && b.BillDate.Year == year);
            return Bills; 
        }
    }


    protected override void OnInitialized()
    {
        // get data for table
        Bills = (DB.Bills
                    .Where(m => m.UserId == this.getUser())
                    .Include(b => b.Category)
                    .Include(b => b.Status)
                    .Include(b => b.PaymentMethod)
                    .Include(b => b.BillItems)
        ).AsQueryable();

        //set month and year to current month and year
        Month = DateTime.Now.Month;
        year = DateTime.Now.Year;

        
    }

    private string getUser()
    {
        var userPrincipal = auth.GetAuthenticationStateAsync().Result.User;
        var userid = userPrincipal.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        if (!string.IsNullOrEmpty(userid))
            return userid;//await UserDbContext.Users.FirstOrDefaultAsync(u => u.Id == userid);
        return "UNKNOWN";
    }

}
