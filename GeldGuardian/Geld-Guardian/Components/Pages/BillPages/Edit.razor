@page "/Bills/edit"
@inject Geld_Guardian.Data.ApplicationDbContext DB
@using Geld_Guardian.Pages.Data.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Bill</h4>
<hr />
@if (Bill is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Bill" OnValidSubmit="UpdateBill" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Bill.BillId" value="@Bill.BillId" />
                <div class="mb-3">
                    <label for="storename" class="form-label">StoreName:</label>
                    <InputText id="storename" @bind-Value="Bill.StoreName" class="form-control" />
                    <ValidationMessage For="() => Bill.StoreName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="billingnumber" class="form-label">BillingNumber:</label>
                    <InputText id="billingnumber" @bind-Value="Bill.BillingNumber" class="form-control" />
                    <ValidationMessage For="() => Bill.BillingNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="billdate" class="form-label">BillDate:</label>
                    <InputDate id="billdate" @bind-Value="Bill.BillDate" class="form-control" />
                    <ValidationMessage For="() => Bill.BillDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="duedate" class="form-label">DueDate:</label>
                    <InputDate id="duedate" @bind-Value="Bill.DueDate" class="form-control" />
                    <ValidationMessage For="() => Bill.DueDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputText id="status" @bind-Value="Bill.Status" class="form-control" />
                    <ValidationMessage For="() => Bill.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="category" class="form-label">Category:</label>
                    <InputText id="category" @bind-Value="Bill.Category" class="form-control" />
                    <ValidationMessage For="() => Bill.Category" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="paymentmethod" class="form-label">PaymentMethod:</label>
                    <InputText id="paymentmethod" @bind-Value="Bill.PaymentMethod" class="form-control" />
                    <ValidationMessage For="() => Bill.PaymentMethod" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/bills">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int BillId { get; set; }

    [SupplyParameterFromForm]
    public Bill? Bill { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Bill ??= await DB.Bills.FirstOrDefaultAsync(m => m.BillId == BillId);

        if (Bill is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateBill()
    {
        DB.Attach(Bill!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BillExists(Bill!.BillId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/bills");
    }

    bool BillExists(int billid)
    {
        return DB.Bills.Any(e => e.BillId == billid);
    }
}
