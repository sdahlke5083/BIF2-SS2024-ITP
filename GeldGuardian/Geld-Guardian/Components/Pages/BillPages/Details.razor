@page "/bills/details"
@attribute [Authorize]
@inject Geld_Guardian.Data.ApplicationDbContext DB
@using Geld_Guardian.Pages.Data.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<div class="row">
    <h1>Details</h1>
</div>

<div class="row">
    <div class="col-4">
        <h4>Bill</h4>
        <hr />
        @if (bill is null)
        {
            <p><em>Loading...</em></p>
        }
        else {
            <dl class="row">
                <dt class="col-sm-4">StoreName</dt>
                <dd class="col-sm-8">@bill.StoreName</dd>
                <dt class="col-sm-4">BillingNumber</dt>
                <dd class="col-sm-8">@bill.BillingNumber</dd>
                <dt class="col-sm-4">BillDate</dt>
                <dd class="col-sm-8">@bill.BillDate</dd>
                @if (bill.Netto is not null)
                {
                    <dt class="col-sm-4">Netto</dt>
                    <dd class="col-sm-8">@bill.Netto</dd>
                }else
                {
                    <dt class="col-sm-4">DueDate</dt>
                    <dd class="col-sm-8">@bill.DueDate</dd>
                }
                <dt class="col-sm-4">Status</dt>
                <dd class="col-sm-8">@bill.Status.Name</dd>
                <dt class="col-sm-4">Category</dt>
                <dd class="col-sm-8">@bill.Category.Name</dd>
                <dt class="col-sm-4">PaymentMethod</dt>
                <dd class="col-sm-8">@bill.PaymentMethod.Name</dd>
            </dl>
            <div>
                <a href="@($"/bills/edit?billid={bill.BillId}")">Edit</a> |
                <a href="@($"/bills")">Back to List</a>
            </div>
        }
    </div>
    @if (bill.Netto is null ){ // if netto is null, then it is a expense and not an income
    <div class="col-6">
        <h4>BillItems</h4>
        <hr />
        @if (bill.BillItems is null)
        {
            <p><em>No items.</em></p>
        }
        else {
            <div class="table-responsive">

                <QuickGrid Class="table" Items="DB.BillItems.Where(m => m.BillId == BillId)">
                    <PropertyColumn Property="billitem => billitem.Description" />
                    <PropertyColumn Property="billitem => billitem.Category.Name" />
                    <PropertyColumn Property="billitem => billitem.Quantity" />
                    <PropertyColumn Property="billitem => billitem.UnitPrice" />
                    <TemplateColumn Context="billitem" Title="Actions">
                        <a href="@($"billitems/edit?billitemid={billitem.BillItemId}")">Edit</a> |
                        <a href="@($"billitems/details?billitemid={billitem.BillItemId}")">Details</a> |
                        <a href="@($"billitems/delete?billitemid={billitem.BillItemId}")">Delete</a>
                    </TemplateColumn>
                </QuickGrid>

            </div>
        }
    </div>
    }
</div>


@code {
    #nullable enable
    Bill? bill;

    [SupplyParameterFromQuery]
    public int BillId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        bill = await DB.Bills
            .Include(m => m.Status)
            .Include(m => m.Category)
            .Include(m => m.PaymentMethod)
            .FirstOrDefaultAsync(m => m.BillId == BillId);

        if (bill is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

    }
}
